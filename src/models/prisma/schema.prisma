generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Modelo de Usuário
model Usuario {
  UsuarioID     String       @id @default(uuid()) 
  Nome          String
  Email         String       @unique           
  Senha         String
  Perfil        String       @default("Público Geral") 
  DataCadastro  DateTime?    @default(now())    
  Ativo         Boolean      @default(true)      

  // Relacionamentos
  PerfisArtistas       PerfisArtistas[]
  InscricoesEditais    InscricoesEditais[]
  InscricoesEventos    InscricoesEventos[]
  ProjetosColaborativos ProjetosColaborativos[]
  ParticipacoesProjetos ParticipacoesProjetos[]
  FeedbacksProjetos    FeedbacksProjetos[]
  DuvidasSugestoesErros DuvidasSugestoesErros[]
}

// Modelo para Perfis de Artistas
model PerfisArtistas {
  PerfilArtistaID String     @id @default(uuid())
  UsuarioID       String
  AreaAtuacao     String
  Biografia       String?
  LinkPortfolio   String? 
  FotoPerfil      String?

  // Relacionamento com usuário
  usuario         Usuario  @relation(fields: [UsuarioID], references: [UsuarioID], onDelete: Cascade)
}

// Modelo para Editais
model Editais {
  EditalID             Int      @id @default(autoincrement())
  Titulo               String
  Descricao            String
  CategoriaArtistica   String  
  PrazoInscricao       DateTime
  DetalhesFinanciamento String?
  CriteriosSelecao     String
  ProcessoInscricao    String
  Organizador          String 
  DataPublicacao       DateTime

  // Relacionamentos
  InscricoesEditais InscricoesEditais[]
}

// Modelo para Inscrições em Editais
model InscricoesEditais {
  InscricaoEditalID Int     @id @default(autoincrement())
  EditalID          Int
  UsuarioID         String
  Status            String
  DataInscricao     DateTime
  Feedback          String?

  // Relacionamentos
  edital   Editais  @relation(fields: [EditalID], references: [EditalID], onDelete: Cascade)
  usuario  Usuario  @relation(fields: [UsuarioID], references: [UsuarioID], onDelete: Cascade)
}

// Modelo para Eventos
model Eventos {
  EventoID        Int     @id @default(autoincrement())
  NomeEvento      String
  Descricao       String
  DataHora        DateTime
  Localizacao     String  
  Organizador     String  
  InfoIngresso    String? 
  ImagemCartaz    String?
  DataPublicacao  DateTime

  // Relacionamentos
  InscricoesEventos InscricoesEventos[]
}

// Modelo para Inscrições em Eventos
model InscricoesEventos {
  InscricaoEventoID Int     @id @default(autoincrement())
  EventoID          Int
  UsuarioID         String
  DataInscricao     DateTime

  // Relacionamentos
  evento   Eventos  @relation(fields: [EventoID], references: [EventoID], onDelete: Cascade)
  usuario  Usuario  @relation(fields: [UsuarioID], references: [UsuarioID], onDelete: Cascade)
}

// Modelo para Projetos Colaborativos
model ProjetosColaborativos {
  ProjetoID            Int     @id @default(autoincrement())
  Titulo               String
  Descricao            String
  AreaAtuacaoNecessaria String
  Localizacao          String?
  TipoColaboracao      String
  CriadorID            String
  DataCriacao          DateTime

  // Relacionamentos
  criador        Usuario  @relation(fields: [CriadorID], references: [UsuarioID], onDelete: Cascade)
  ParticipacoesProjetos ParticipacoesProjetos[]
  FeedbacksProjetos FeedbacksProjetos[]
}

// Modelo para Participações em Projetos
model ParticipacoesProjetos {
  ParticipacaoID  Int     @id @default(autoincrement())
  ProjetoID       Int
  ParticipanteID  String
  DataParticipacao DateTime

  // Relacionamentos
  projeto    ProjetosColaborativos  @relation(fields: [ProjetoID], references: [ProjetoID], onDelete: Cascade)
  participante Usuario              @relation(fields: [ParticipanteID], references: [UsuarioID], onDelete: Cascade)
}

// Modelo para Feedbacks em Projetos
model FeedbacksProjetos {
  FeedbackID     Int     @id @default(autoincrement())
  ProjetoID      Int
  AutorID        String
  Comentario     String?
  Nota           Int?    // Nota do feedback
  DataFeedback   DateTime

  // Relacionamentos
  projeto   ProjetosColaborativos  @relation(fields: [ProjetoID], references: [ProjetoID], onDelete: Cascade)
  autor     Usuario                @relation(fields: [AutorID], references: [UsuarioID], onDelete: Cascade)
}

// Modelo para Dúvidas, Sugestões e Erros
model DuvidasSugestoesErros {
  DuvidaSugestaoErroID Int     @id @default(autoincrement())
  UsuarioID            String
  Tipo                 String
  Descricao            String
  ArquivoAnexo         String?
  DataEnvio            DateTime

  // Relacionamentos
  usuario   Usuario  @relation(fields: [UsuarioID], references: [UsuarioID], onDelete: Cascade)
}
